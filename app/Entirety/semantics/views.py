from django.views.generic import TemplateView, ListView
from django.shortcuts import redirect
from projects.models import Project
from django.http import JsonResponse
from django.http import HttpRequest
import json
from projects.mixins import ProjectContextMixin
from semantics.prepDataSemantics import PrepData
from django.shortcuts import render
from entities.requests import get_entity
from entities.requests import get_entities_list, get_entity
import stardog
from .models import Prefix
from django.urls import reverse_lazy
from django.conf import settings
from django.contrib import messages
from django.forms import formset_factory
from django.shortcuts import render, redirect
from SPARQLWrapper import SPARQLWrapper, JSON
from semantics.tables import PrefixTable
from semantics.forms import PrefixForm, PrefixBasicForm
import re



class StartPage(ProjectContextMixin, TemplateView):
    template_name = "semantics/start_page.html"


class SemanticsVisualizer(ProjectContextMixin, TemplateView):
    template_name = "semantics/semantics_visualize.html"

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        # PrepData.generate_df(self)
        context['elements'] = PrepData.generate_df(self)
        context['types'] = PrepData.types(self)
        context['relationships'] = PrepData.relationships(self)
        return context

    def post(self, request, project_id, *args, **kwargs):
        data = json.loads(request.body)
        entityID = (data['nodeID'])
        entity = get_entity(self, entityID, "", self.project)
        entity_json = json.loads(entity.json())
        table_data = []
        for key, value in entity_json.items():
            if isinstance(value, dict):
                val_type = value.get('type', '-')
                val_value = json.dumps(value.get('value', '-'))
                val_metadata = json.dumps(value.get('metadata', '-'))
                table_data.append({"Name": key, "Value": val_value, "Type": val_type, "Metadata": val_metadata})
            else:
                table_data.append({"Name": key, "Value": value, "Type": "-", "Metadata": "-"})

        return JsonResponse({'entity': table_data})

    def all_values(self, dict_obj, parent_key=''):
        """
        Recursively yields all keys and values in a nested dictionary.

        This function iterates over all key-value pairs in the given dictionary, and recursively
        yields all keys and values in any nested dictionaries. The yielded keys are generated by
        concatenating the parent key and the current key, separated by a dot ('.'), if applicable.

        Args:
            dict_obj (dict): The dictionary to extract keys and values from.
            parent_key (str, optional): The parent key to be used for nested dictionaries.
                Defaults to an empty string.

        Yields:
            tuple: A tuple containing the current key and value as (key, value).

        Example:
            >>> my_dict = {'a': 1, 'b': {'c': 2, 'd': {'e': 3}}}
            >>> for key, value in all_values(my_dict):
            ...     print(key, value)
            a 1
            b.c 2
            b.d.e 3

        """

        # Iterate over all key-value pairs in the passed dictionary
        for key, value in dict_obj.items():
            # Generate the current key by concatenating the parent key and the current key
            current_key = f"{parent_key}.{key}" if parent_key else key

            # If value is of dictionary type then recursively yield all keys and values
            # in that nested dictionary
            if isinstance(value, dict):
                yield from self.all_values(value, current_key)
            else:
                # Yield the current key and value as a tuple
                yield current_key, value

class RDFFileVisualizer(ProjectContextMixin, TemplateView):
    template_name = "semantics/rdf_visualizer.html"   
    table_class = PrefixTable

    def get_table_data(self):
        self.entries = Prefix.objects.all().filter(projectid=self.project.uuid)
        # print("Entries : ", self.entries)
        if not self.request.session.get("prefixes"):
            self.set_table_data()
        return PrefixTable(self.entries)
    
    def set_table_data(self):
        self.request.session["prefixes"] = [{"name": "mvf", "value":"1244"}]

    def post(self, request,*args, **kwargs):
        context = super(RDFFileVisualizer, self).get_context_data()
        file = request.FILES['myfile']
        context['prefixes'] = self.request.session['prefixes']
        content = file.read()
        self.post_ttl(request, file, content)
        return render(request, "semantics/start_page.html", context)

    def post_ttl(self, request, file, content):        
        self.conn_details = {
        'endpoint': settings.STARDOG_URL,
        'username': settings.STARDOG_USER,
        'password': settings.STARDOG_PASSWORD
        }
        database = settings.STARDOG_DATABASE
        try:
            with stardog.Connection(database, **self.conn_details) as conn:
                # messages.success(self.request,message="Successfully Connected to Stardog Database !!")
                conn.begin()
                if 'ttl' in file.name:
                    messages.success(self.request,message="Successfully Uploade File to Stardog Database !!")
                    conn.add(stardog.content.Raw(content, content_type="text/turtle"))
                    conn.commit()
        except Exception as e:
            messages.error(self.request,e)
            print(e)
    
    def get_rdf_data(self, query):        
        database = settings.STARDOG_DATABASE     
        self.conn_details = {
            'endpoint': settings.STARDOG_URL,
            'username': settings.STARDOG_USER,
            'password': settings.STARDOG_PASSWORD
            }
        try:
            if query:                
                with stardog.Connection(database, **self.conn_details) as conn:
                    pks = self.request.POST.getlist("include")
                    selected_objects = Prefix.objects.filter(pk__in=pks)
                    print("Selected Objects :",pks)
                    query_string = ""
                    for item in self.request.session['prefixes']:
                        query_string = query_string + "@prefix " + item["name"] + ": " + item["value"] + " .\n"
                        # query_string = query_string + "PREFIX " + item["name"] + ": " + item["value"] + "\n"
                    query_string = query_string + query
                    print(query_string)
                    store_query_result = conn.select(query)
                    list_to_print = []
                    filtered_keys = ['subject', 'property', 'object']
                    for row in store_query_result['results']['bindings']:
                        for key in row.keys():
                            if key not in filtered_keys:
                                row.pop(key)
                                break
                        list_to_print.append(row)
                    results_list = PrepData.prep_query_result(self,query_list=list_to_print)
                    return PrepData.prep_cyto_list(self, results_list)
        except  Exception as e:
            messages.error(self.request, e)

    def get_context_data(self, **kwargs):
        # del self.request.session["prefixes"]
        context = super(RDFFileVisualizer, self).get_context_data(**kwargs)
        query = self.request.GET.get("query", default="")
        context['tagglevalue'] = 1
        context['query'] = query
        context["elements"] = self.get_rdf_data(query)
        context['prefixestable'] = RDFFileVisualizer.get_table_data(self)
        # print("Debug table: ", )      
        return context

class UpdatePrefix(ProjectContextMixin,TemplateView):
    template_name = "semantics/update.html"
    form_class = PrefixBasicForm

    def get_context_data(self, **kwargs):
        basic_info = PrefixBasicForm(initial={"projectid":self.project.uuid})
        basic_info.fields["projectid"].widget.attrs["readonly"] = True
        prefix_form_set = formset_factory(PrefixForm, max_num=0)
        entries = Prefix.objects.all().filter(projectid=self.project.uuid)
        obj = []
        for entry in entries:
            # include_val = "on" if entry.include == True else "off"
            # test = "on" if entry.include == True else "off"
            obj.append({"name": entry.name, "value":entry.value, "key":str(entry.name)+str(self.project.uuid), "include": entry.include})
            # obj.append({"name": entry.name, "value":entry.value, "include":test,"key":str(entry.name)+str(self.project.uuid)})            
        print("Object : ", obj)
        attributes = prefix_form_set(prefix="attr", initial=obj)
        context = super(UpdatePrefix, self).get_context_data(**kwargs)
        # context['prefixes'] = self.request.session['prefixes'] 
        context["attributes"] = attributes
        context["basic_info"] = basic_info
        context["update_prefix"] = self.project.name
        return context

    def post(self, request, *args, **kwargs):
        print(self.request.POST.items())
        prefix = []
        form_prefix_keys = [
            k for k, v in self.request.POST.items() if re.search(r"attr-\d+", k)
        ]
        i = j = 0
        self.clear_prefix_table()
        while i < (len(form_prefix_keys) /3):
            keys = [
                    k
                    for k, v in self.request.POST.items()
                    if k in form_prefix_keys and re.search(j.__str__(), k)
                ]
            if any(keys):
                try:
                    include_key = self.request.POST.get(keys[2])
                except:
                    include_val = False
                    include_key = "off"
                print("Include key", include_key)
                if include_key == "on":
                    include_val = True
                else: include_val = False                  
                prefix_obj = { "name": self.request.POST.get(keys[0]), "value": self.request.POST.get(keys[1]), "include": include_val,
                              "key":self.request.POST.get(keys[0])+str(self.project.uuid)}                
                # obj = Prefix(name=self.request.POST.get(keys[0]), value=self.request.POST.get(keys[1]), include=include_val,
                #             projectid=self.project.uuid, key=str(self.project.uuid)+str(self.request.POST.get(keys[0])))
                obj = Prefix(name=self.request.POST.get(keys[0]), value=self.request.POST.get(keys[1]), include = include_val,
                            projectid=self.project.uuid, key=str(self.project.uuid)+str(self.request.POST.get(keys[0])))                
                print(prefix_obj)
                obj.save()
                prefix.append(prefix_obj)
                i = i +1
            j = j + 1
        self.request.session["prefixes"] = prefix
        context = super(UpdatePrefix, self).get_context_data(**kwargs)
        return redirect("projects:semantics:rdfvisualize", project_id=self.project.uuid)

    def clear_prefix_table(self):
        Prefix.objects.all().delete()

class UpdateTable(ProjectContextMixin, TemplateView):
    template_name = "semantics/rdf_visualizer.html"   
    table_class = PrefixTable
    def post(self, request, *args, **kwargs):
        pks = request.POST.getlist("include")
        selected_objects = Prefix.objects.filter(pk__in=pks)
        print(selected_objects)
        return redirect("projects:semantics:rdfvisualize", project_id=self.project.uuid)
    
    def get_context_data(self, **kwargs):
        context = super(UpdateTable, self).get_context_data(**kwargs)
class LdVisualizer(ProjectContextMixin, TemplateView):
    templet_name = "semantics/semantics_LdVisualize.html"

class PrefixListView(ListView):
    model = Prefix
    template_name = "test.html"
